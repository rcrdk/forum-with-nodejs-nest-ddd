generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    INSTRUCTOR
}

model User {
    id       String   @id @default(uuid())
    name     String
    email    String   @unique
    password String
    role     UserRole @default(STUDENT)

    questions     Question[]
    answers       Answer[]
    comments      Comment[]
    notifications Notification[]

    @@map("users")
}

model Question {
    id           String    @id @default(uuid())
    title        String
    slug         String    @unique
    content      String
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime? @updatedAt @map("updated_at")
    authorId     String    @map("author_id")
    bestAnswerId String?   @unique @map("best_answer_id")

    author     User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    bestAnswer Answer? @relation("bestAnswer", fields: [bestAnswerId], references: [id], onDelete: SetNull)

    answers     Answer[]
    comments    Comment[]
    attachments Attachment[]

    @@map("questions")
}

model Answer {
    id         String    @id @default(uuid())
    content    String
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime? @updatedAt @map("updated_at")
    authorId   String    @map("author_id")
    questionId String    @map("question_id")

    author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    question     Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    bestAnswerOn Question? @relation("bestAnswer")

    comments    Comment[]
    attachments Attachment[]

    @@map("answers")
}

model Comment {
    id         String    @id @default(uuid())
    content    String
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime? @updatedAt @map("updated_at")
    authorId   String    @map("author_id")
    questionId String?   @map("question_id")
    answerId   String?   @map("answer_id")

    question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("comments")
}

model Attachment {
    id         String  @id @default(uuid())
    title      String
    url        String
    questionId String? @map("question_id")
    answerId   String? @map("answer_id")

    question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

    @@map("attachments")
}

model Notification {
    id          String    @id @default(uuid())
    title       String
    content     String
    readAt      DateTime? @map("read_at")
    createdAt   DateTime  @default(now()) @map("created_at")
    recipientId String    @map("recipient_id")

    recipient User @relation(fields: [recipientId], references: [id], onDelete: Cascade)

    @@map("notifications")
}
